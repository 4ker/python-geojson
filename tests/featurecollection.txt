
Tests of the Feature collections protocol
-----------------------------------------

A dictionary can satisfy the protocol
-------------------------------------

  >>> fc = {"type": "FeatureCollection",
  ...       "features": [{"type": "Feature",
  ...                      "id": "1",
  ...                      "geometry": {"type": "Point",
  ...                                   "coordinates": [0, 1]}}]}


  Encoding

  >>> import geojson
  >>> json = geojson.dumps(fc)
  >>> json
  '{"type": "FeatureCollection", "features": [{"geometry": {"type": "Point", "coordinates": [0, 1]}, "type": "Feature", "id": "1"}]}'

  Decoding
  
  >>> fcb = geojson.loads(json)
  >>> fcb
  {u'type': u'FeatureCollection', u'features': [{u'geometry': {u'type': u'Point', u'coordinates': [0, 1]}, u'type': u'Feature', u'id': u'1'}]}


GeoJSON types thmeselves satisfy the protocol (of course!)
-----------------------------------------------------------
  
  >>> features = [geojson.Feature(id=1, geometry=geojson.Point(coordinates=(0, 1)))]
  >>> fco = geojson.FeatureCollection(features=features)
  >>> fco.features
  [Feature(geometry={'crs': {'type': 'EPSG', 'properties': {'code': 4326}}, 'type': 'Point', 'coordinates': (0, 1)}, properties={}, id=1)]


  Encoding

  >>> json = geojson.dumps(fco)
  >>> json
  '{"type": "FeatureCollection", "features": [{"geometry": {"crs": {"type": "EPSG", "properties": {"code": 4326}}, "type": "Point", "coordinates": [0, 1]}, "type": "Feature", "properties": {}, "id": 1}]}'

  
   and can encode back into a instnace of the same kind, or supply your own hook:

  >>> hook = lambda ob: geojson.GeoJSON.to_instance(ob, geojson.feature)
  >>> fc = geojson.loads(json, object_hook=hook)
  >>> fc.features
  [Feature(geometry={'crs': {'type': 'EPSG', 'properties': {u'code': 4326}}, 'type': 'Point', 'coordinates': [0, 1]}, properties={}, id=1)]
  
  >>> fc.features[0].geometry
  Point(crs={'type': 'EPSG', 'properties': {u'code': 4326}}, coordinates=[0, 1])

  >>> geometry = fc.features[0].geometry
  >>> geometry.coordinates
  [0, 1]
  >>> 

